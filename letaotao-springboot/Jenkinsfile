pipeline {
    agent {
        node {
            label 'maven'
        }

    }
    stages {
        stage('拉取代码') {
            agent none
            steps {
                container('maven') {
                    git(url: 'https://github.com/shengqiangdd/letaotao.git', credentialsId: 'github-id', branch: 'main', changelog: true, poll: false)
                    sh 'ls -al'
                }

            }
        }

        stage('项目编译') {
            agent none
            steps {
                container('maven') {
                    sh 'ls'
                    sh 'cd letaotao-springboot'
                    sh 'mvn clean package -Dmaven.test.skip=true'
                }

            }
        }

        stage('default-2') {
            parallel {
                stage('构建letao-admin镜像') {
                    agent none
                    steps {
                        container('maven') {
                            sh 'cd letaotao-springboot/service/web-admin'
                            sh 'ls target'
                            sh 'docker build -t letao-admin:latest -f Dockerfile .'
                        }

                    }
                }

                stage('构建letao-app镜像') {
                    agent none
                    steps {
                        container('maven') {
                            sh 'cd letaotao-springboot/service/web-app'
                            sh 'ls target'
                            sh 'docker build -t letao-app:latest -f Dockerfile .'
                        }

                    }
                }

            }
        }

        stage('default-3') {
            parallel {
                stage('推送letao-admin镜像') {
                    agent none
                    steps {
                        container('maven') {
                            sh 'cd letaotao-springboot/service/web-admin'
                            withCredentials([usernamePassword(credentialsId : 'aliyun-docker-registry' ,usernameVariable : 'DOCKER_USER_VAR' ,passwordVariable : 'DOCKER_PWD_VAR' ,)]) {
                                sh 'echo "$DOCKER_PWD_VAR" | docker login $REGISTRY -u "$DOCKER_USER_VAR" --password-stdin'
                                sh 'docker tag letao-admin:latest $REGISTRY/$DOCKERHUB_NAMESPACE/letao-admin:SNAPSHOT-$BUILD_NUMBER'
                                sh 'docker push $REGISTRY/$DOCKERHUB_NAMESPACE/letao-admin:SNAPSHOT-$BUILD_NUMBER'
                            }

                        }

                    }
                }

                stage('推送letao-app镜像') {
                    agent none
                    steps {
                        container('maven') {
                            sh 'cd letaotao-springboot/service/web-app'
                            withCredentials([usernamePassword(credentialsId : 'aliyun-docker-registry' ,usernameVariable : 'DOCKER_USER_VAR' ,passwordVariable : 'DOCKER_PWD_VAR' ,)]) {
                                sh 'echo "$DOCKER_PWD_VAR" | docker login $REGISTRY -u "$DOCKER_USER_VAR" --password-stdin'
                                sh 'docker tag letao-app:latest $REGISTRY/$DOCKERHUB_NAMESPACE/letao-app:SNAPSHOT-$BUILD_NUMBER'
                                sh 'docker push $REGISTRY/$DOCKERHUB_NAMESPACE/letao-app:SNAPSHOT-$BUILD_NUMBER'
                            }

                        }

                    }
                }

            }
        }

        stage('default-4') {
            parallel {
                stage('letao-admin - 部署到dev环境') {
                    agent none
                    steps {
                        sh 'cd letaotao-springboot/service/web-admin'
                        kubernetesDeploy(configs: 'deploy/**', enableConfigSubstitution: true, kubeconfigId: "$KUBECONFIG_CREDENTIAL_ID")
                    }
                }

                stage('letao-app - 部署到dev环境') {
                    agent none
                    steps {
                        sh 'cd letaotao-springboot/service/web-app'
                        kubernetesDeploy(configs: 'deploy/**', enableConfigSubstitution: true, kubeconfigId: "$KUBECONFIG_CREDENTIAL_ID")
                    }
                }

            }
        }

        //1、配置全系统的邮件：                   全系统的监控
        //2、修改ks-jenkins的配置，里面的邮件；   流水线发邮件
        stage('发送确认邮件') {
            agent none
            steps {
                mail(to: 'cxqd216@163.com', subject: '构建结果', body: "构建成功了  $BUILD_NUMBER")
            }
        }

    }
    environment {
        DOCKER_CREDENTIAL_ID = 'dockerhub-id'
        GITHUB_CREDENTIAL_ID = 'github-id'
        KUBECONFIG_CREDENTIAL_ID = 'demo-kubeconfig'
        REGISTRY = 'registry.cn-hangzhou.aliyuncs.com'
        DOCKERHUB_NAMESPACE = 'letao'
        GITHUB_ACCOUNT = 'kubesphere'
        APP_NAME = 'devops-java-sample'
        ALIYUNHUB_NAMESPACE = 'letao'
    }
    parameters {
        string(name: 'TAG_NAME', defaultValue: '', description: '')
    }
}